id: 4c4bca42-bd3d-43dc-9a3f-515bda8d0b44
post_type: article
title: "StarkNet Alpha 0.10.0: Released to Mainnet!"
published_date: 2022-09-05T17:13:30.055Z
image: /assets/1_isdu6pzjsdnkp2ovk6-6ma-2.png
category: engineering
topic:
  - starknet
  - 4e28457a-74a1-4570-88ec-6ef5817be14f
  - 47ef120d-7b74-40a3-acb2-0ff2af28ecf4
short_desc: We are excited to present StarkNet Alpha 0.10.0. This version is
  another step toward scaling Ethereum without compromising on security and
  decentralization.
blocks:
  - type: markdown
    body: >-
      ### TL;DR


      * Account Abstraction Improvements in spirit of EIP-4337


      1. Validate — Execute separation

      2. Transaction uniqueness is now ensured in the protocol (Nonce)


      * The fee mechanism is extended to include:


      1. L1→L2 Messages

      2. Declare Transactions


      * Few Cairo syntax changes


      ### Intro


      We are excited to present StarkNet Alpha 0.10.0. This version is another step toward scaling Ethereum without compromising on security and decentralization.


      This blog post briefly describes the main features of this version. For the full list of changes, check the [release notes](https://github.com/starkware-libs/cairo-lang/releases). For more detailed information, check the [documentation](https://docs.starknet.io/).


      ### Account Abstraction Changes


      We move forward with[ StarkNet’s account abstraction](https://community.starknet.io/t/starknet-account-abstraction-model-part-1/781). This version introduces changes inspired by [EIP-4337](https://eips.ethereum.org/EIPS/eip-4337).


      #### Validate/Execute Separation


      Up until now, the account’s \_\_execute\_\_ function was responsible for both the transaction validation and execution. In 0.10.0 we break this coupling and introduce a separate \_\_validate\_\_ function into accounts. Upon receiving a transaction, the account contract will first call \_\_validate\_\_, and then, if successful, proceed to \_\_execute\_\_.


      The validate/execute separation provides a protocol-level distinction between invalid and reverted (yet valid) transactions. Thanks to that, sequencers will be able to charge fees for the execution of a valid transaction regardless of whether it was reverted or not.


      #### Nonce


      In version 0.10.0 a nonce field is added in order to enforce transaction uniqueness at the protocol level. Until now nonces were handled at the account contract level, which meant that a transaction with the same hash could be executed twice theoretically.


      Similarly to Ethereum, every contract now includes a nonce, which counts the number of executed transactions from this account. Account contracts will only accept transactions with a matching nonce, i.e., if the current nonce of the account is X, then it will only accept transactions with nonce X.


      #### New Transaction Version


      To allow backward-compatibility, we will introduce those two changes via a new transaction version — [v1](https://docs.starknet.io/docs/Blocks/transactions/#invoke-transaction-version-1%5C). Those changes will only apply to the new version, and older accounts will still be able to execute version 0 transactions.


      Note — transaction v0 is now deprecated and will be removed in StarkNet Alpha v0.11.0. Please make sure you upgrade to use the new transaction version.


      For more detailed information about the transaction version, please read the [documentation](https://docs.starknet.io/docs/Blocks/transactions/#invoke-transaction-version-1%5C).


      #### Fees Mechanism


      The new version allows to include fees for two required components:


      * [L1→L2 Message](https://docs.starknet.io/docs/L1-L2%20Communication/messaging-mechanism#l1--l2-message-fees)

      * [Declare transaction](https://docs.starknet.io/docs/Blocks/transactions#declare-transaction)


      These fees will not be mandatory in this version and will only be enforced starting StarkNet Alpha v0.11.0.


      #### Cairo Syntax Changes


      In favor of gradual progress towards an upgrade of Cairo, [Cairo 1.0](https://www.youtube.com/watch?v=Ny4Rv6ztINU), this version includes several syntax changes.


      To minimize inconvenience, the version release will include a [migration script](https://www.youtube.com/watch?v=kXs59zaQrsc) that automatically applies the above changes. You can find more details [here](https://github.com/starkware-libs/cairo-lang/releases).


      ### What’s Next?


      * In a few weeks, we plan to introduce parallelization into the sequencer, enabling faster block production (V0.10.1)

      * We will soon complete the last part that must be included in the fee payment — Account deployment

      * Cairo 1.0 release! More info on that in an upcoming post.


      ### How Can I Be More Engaged?


      * Go to [starknet.io](https://starknet.io/) for all StarkNet information, documentation, tutorials, and updates.

      * Join [StarkNet Discord](http://starknet.io/discord) for dev support, ecosystem announcements, and becoming a part of the community.

      * Visit the [StarkNet Forum](http://community.starknet.io/) to stay up to date and participate in StarkNet research discussions.


      We are always happy to receive feedback on our [documentation](https://docs.starknet.io/)!
