id: 28b6d5cf-eb60-4735-8824-a1877bcedff7
post_type: article
title: Post with code block
published_date: 2023-07-05T17:24:27.287Z
category: engineering
topic:
  - open_source
short_desc: Here is a short desc
blocks:
  - type: markdown
    body: >-
      ### Safe Casm


      The method by which Sierra guarantees that user code is always provable is by compiling Sierra instructions to a subset of Casm, which we call "safe Casm". The important property that we require from safe Casm is being provable for *all* inputs. A canonical example of safe Casm is using `if/else` instructions instead of `assert`, i.e. making sure all failures are graceful.


      To better understand the considerations that go into designing the Sierra → Casm compiler, consider the `find_element` function from the common library of Cairo 0:
  - type: code
    language: cairo
    body:
      code: |-
        use starknet::syscalls::emit_event_syscall;

        let keys = ArrayTrait::new();
        keys.append('key');
        keys.append('deposit');
        let values = ArrayTrait::new();
        values.append(1);
        values.append(2);
        values.append(3);
        emit_event_syscall(keys, values).unwrap_syscall();
  - type: markdown
    body: "## C﻿ode example in JavaScript"
  - type: code
    language: javascript
    body:
      lang: javascript
      code: >-
        web3.extend({
            property: 'myModule',
            methods: [{
                name: 'getBalance',
                call: 'eth_getBalance',
                params: 2,
                inputFormatter: [web3.extend.formatters.inputAddressFormatter, web3.extend.formatters.inputDefaultBlockNumberFormatter],
                outputFormatter: web3.utils.hexToNumberString
            },{
                name: 'getGasPriceSuperFunction',
                call: 'eth_gasPriceSuper',
                params: 2,
                inputFormatter: [null, web3.utils.numberToHex]
            }]
        });


        web3.extend({
            methods: [{
                name: 'directCall',
                call: 'eth_callForFun',
            }]
        });
  - type: code
    language: python
    body:
      code: |
        # Python3 code to demonstrate working of
        # Replace duplicate Occurrence in String
        # Using split() + enumerate() + loop

        # initializing string
        test_str = 'Gfg is best . Gfg also has Classes now. \
        				Classes help understand better . '

        # printing original string
        print("The original string is : " + str(test_str))

        # initializing replace mapping
        repl_dict = {'Gfg' : 'It', 'Classes' : 'They' }

        # Replace duplicate Occurrence in String
        # Using split() + enumerate() + loop
        test_list = test_str.split(' ')
        res = set()
        for idx, ele in enumerate(test_list):
        	if ele in repl_dict:
        		if ele in res:
        			test_list[idx] = repl_dict[ele]
        		else:
        			res.add(ele)
        res = ' '.join(test_list)

        # printing result
        print("The string after replacing : " + str(res))
