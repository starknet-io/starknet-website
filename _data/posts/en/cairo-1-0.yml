id: "ec317b7f-7c4a-4605-9ce4-5e09aed5a76a"
post_type: "article"
title: "Cairo 1.0"
published_date: "2022-09-12T00:00:00+00:00"
time_to_consume: "5 min read"
image: "/assets/1_iy9nqgkt4hudnuyvanyyyw-1.png"
category: "engineering"
topic:
  - "cairo"
  - "starknet"
  - "zk-proofs"
  - "4e28457a-74a1-4570-88ec-6ef5817be14f"
short_desc: "In 2020 we released Cairo, a Turing-complete programming language, and took a big step towards supporting verifiable computation using STARKs. Today, we announce Cairo 1.0, the biggest advancement of Cairo to date."
blocks:
  - type: "markdown"
    body: "### TL;DR\n\n* Cairo 1.0 is the first major release following theÂ [introduction of Cairo](https://medium.com/starkware/hello-cairo-3cb43b13b209)Â two years ago\n* Cairo 1.0 will give developers a safer, simpler, more usable programming language\n* At the heart of Cairo 1.0 will beÂ **Sierra**, an intermediary representation layer that promises greater long term stability for Cairo programs\n* Sierra advances Cairo to serve in a permissionless network:\\\n  -Â **Protecting the network**: it allows more robust DoS protection\\\n  -Â **Protecting the user**: it allows Ethereum-grade censorship resistanceCairo 1.0 will effect StarkNet in many ways. It will also effect theÂ [Regenesis](https://medium.com/starkware/regenesis-starknets-no-sweat-state-reset-e296b12b80ae). We will post more information about Regenesis in the coming weeks.\n\n### Introduction\n\nIn 2020 we released Cairo, a Turing-complete programming language, and took a big step towards supporting verifiable computation using STARKs. Today, we announceÂ **Cairo 1.0**, the biggest advancement of Cairo to date. It will introduce an improved language, with features that will enhance usability, safety and convenience. It is designed to support StarkNetâ€™s requirements as a permissionless network, allowing the protocol to become simpler and safer.\\\nThe development is already ongoing, and we expect the first release to happen soon.\n\nIn this post we will describe the journey of Cairo so far and share details on the upcoming features.\n\n### The Cairo Journey\n\nUntil 2020, niche knowledge was needed to build STARK-provable programs for general computation. It was only possible for those who understood the complex math behind STARKs. Specifically, for every business logic, i.e. every computation, one needed to generate an Algebraic Intermediate Representation (AIR) â€” a set of polynomial constraints that represents the specific computation.\n\nCairo was born out of the realization that verifiable computation should be made available to developers everywhere. Cairo makes it possible for developers to harness the power of STARKs.\n\nThe developer community has since seized on Cairo to build enthusiastically. Everything in the thriving StarkNet ecosystem today is based on Cairo. BetweenÂ [StarkNet](https://starkware.co/starknet/)Â andÂ [StarkEx](https://starkware.co/starkex/), Cairo-powered applications have processed over 220M transactions, minted more than 65M NFTs, and handled $700B worth of trades, all settled on Ethereum.\n\nWhile Cairo made STARKs accessible, it was originally designed as an assembly language, and as such it was written as a low level language.\n\n![An example for the early programs that were written in Cairo](/assets/cairocode_01.png \"An example for the early programs that were written in Cairo\")\n\nPrompted by feedback from developers and the rise ofÂ [StarkNet](https://starkware.co/starknet/), we gradually made Cairo more expressive and more developer-friendly.\n\n![An example from the ERC-20 Cairo contract demonstrating support of variables, if statements, errors, and UINT256 library](/assets/cairocode_02.png \"An example from the ERC-20 Cairo contract demonstrating support of variables, if statements, errors, and UINT256 library\")\n\nBut we soon concluded that it is time to take a big leap forward and, instead of incremental improvements to Cairo, go for a bolder transformation.\n\n### Cairo 1.0\n\nFor Cairo 1.0 weâ€™ve built a whole new compiler from the ground up, which will provide developers with safety features, and will allow them to write contracts in a simpler and more expressive way.\n\n#### Introducing Sierra: ensuring every Cairo run can be proven\n\nThe main addition in Cairo 1.0 is Sierra (**S**afeÂ **I**nt**e**rmediateÂ **R**ep**r**esent**a**tion). Sierra constitutes a new intermediate representation layer between Cairo 1.0 and Cairo byte code. Sierraâ€™s goal is to ensure that every Cairo run â€” i.e. a Cairo program and its input â€” can be proven (see more below).\n\nSierra promises Cairo devs better future-proof code. Further stability is provided by the fact that StarkNet contracts wonâ€™t need recompiling in the case of improvements to the underlying system (e.g., CPU AIR architecture changes, improvements of the final translation from Sierra to Cairo byte code).\n\n**Proving every Cairo run.**Â In old Cairo, a Cairo run can result in three cases â€” TRUE, FALSE, or failure. Failed runs canâ€™t be proven. Sierra, ensures that a Cairo run will never fail, and can only result in TRUE or FALSE. This in turn, ensures that every Cairo run can be proven.\n\nThis introduction of Sierra has important implications for StarkNet as a permissionless network. Sierra ensures that even reverted transactions can be included in StarkNet blocks. This property will allow the StarkNet protocol to remain lean and simple without the need to add complex crypto-economic mechanisms.\\\nTwo meaningful examples:\n\n1. Sequencers will be able to collect fees on reverted transactions, allowing StarkNet to prevent Sequencer DoS in a well-established manner.\n2. Implementing forced L1 transactions will be possible, allowing StarkNet to inherit the full censorship-resistance of Ethereum.\n\n### **Language Features**\n\nCairo 1.0 will offer many improvements to the programming language itself. Not everything listed below will be part of the first release, but it is part of the roadmap.\n\n#### **Improved syntax**\n\n* No moreÂ *local*Â andÂ *tempvar*. We now only needÂ *let*Â to rule them all variables.\n* ImprovedÂ *if*Â statements syntax\n\n```python\n#Old\nif cond != 0 {\n  tempvar x = x+1;\n} else {\n  tempvar x = x;\n}\n__________________________________\n#New\nif cond { x = x + 1; }\n```\n\n#### **Type safety guarantees**\n\nThe compiler will use strong typing to improve the security of the code. For example:\n\n* Pointers will always point to initialized memory.\n* Dictionaries will always be squashed, as opposed to leaving the responsibility to call squash_dict to the programmer.\n\n#### **Easier to use language constructs**\n\nFor example:\n\n* For loops\n\n```\nlet sum = 0\nfor x in iter {\n  sum = sum + x;\n}\n```\n\n* Boolean expressions\n* Integers (with regular integer division ðŸ‘¯)\n* Overflow protection for the relevant types\n* Boolean conditions\n\n```\n#Old\nIf cond1:\n  if cond2:\n       # Some code\n  else if cond3:\n       # Same code\n__________________________________\n#New\nIf cond1 && (cond2 || cond3) { â€¦ }\n```\n\n#### **A fully fledged type system**\n\n* Abstract data types (i.e. Rust-like enum)\n\n```\nenum Option<T> {\n Some: T,\n None,\n}\nmatch result {\n Some(r) => {..},\n None => {..},\n}\n```\n\n* Traits\n\n```\ntrait Add<Uint256> {\n    fn add(â€¦) { â€¦ }\n}\n\nlet a: Uint256 = 1;\nlet b: Uint256 = 4;\na + b; // Evaluated to 5 of type Uint256.\n```\n\n#### **More intuitive libraries**\n\n(e.g. dict, arrays)\n\n* Dict<Uint256, MyStruct>;\n* Array<MyOtherStruct>;\n\n#### **More optimized code**\n\nNo need to explicitly state allocation of local variables â€” auto detected and done automatically.\n\n#### **Better compiler integration**\n\nEnabling better IDE support, package management and better facilitation of community contributions.\n\n### **Conclusion**\n\nTwo years after Cairo was first used in production, we are developing Cairo 1.0, which will deliver improved expressibility, security, and syntax. It will take a large stride forward, allowing developers to more easily write their StarkNet contracts.\n\nIn another post, coming soon, we will share more details on how Cairo 1.0 will effect StarkNetâ€™s regenesis, and how developers should prepare for its release."
