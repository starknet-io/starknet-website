id: b4520ad3-6b7c-46fd-b179-be48a585abeb
post_type: article
title: "Starknet Quantum Leap: Major Throughput Improvements are Here!"
toc: false
published_date: 2023-07-05T16:00:10.445Z
image: /assets/frame-17.png
category:
  - engineering
  - a6270a0b-ff84-4a7a-bd07-5183e0f2e857
  - a20b045f-7820-4a63-842f-0eb3753f1ec6
  - ecosystem
topic:
  - bf9c7bc3-ba10-4865-8e69-8be4cfa68f29
  - cairo
  - 47ef120d-7b74-40a3-acb2-0ff2af28ecf4
  - 1cdb8d7b-46c5-4508-8d55-a07d20bf962d
short_desc: >
  Starknet Alpha V0.12.0 focuses on enhancing performance and user experience.
  The new version introduces a Rust-based implementation of the Sequencer,
  improving throughput by 10X and reducing transaction latency. Other features
  include a new compiler version, removal of the pending transaction status, and
  the addition of a block hash syscall. 
blocks:
  - type: group
    blocks:
      - type: markdown
        body: "## Starknet is about to break through the TPS barrier"
      - type: markdown
        body: >-
          ## TL;DR


          * Starknet alpha V0.12.0 is deployed on testnet

          * Starknet achieved a remarkable 10x increase in throughput by implementing the Sequencer in Rust. This was driven by a close collaboration between StarkWare and LambdaClass

          * A smoother user experience will be provided as the \`PENDING\` status for transactions has been removed

          * A new syscall has been introduced, allowing easy retrieval of past block hashes

          * Starknet alpha V0.12.0 will support a new Cairo syntax that focuses on safety

          * The network upgrade to this version will undergo a community vote, ensuring widespread participation and input


          ## Introduction


          We are excited to announce the release of Starknet Alpha V0.12.0. This version is a significant milestone which will mark the beginning of a major leap forward in providing enhanced performance and scalability. This version is another step in Starknet's journey to scale Ethereum, with a focus on addressing throughput and latency. To tackle these challenges, we targeted Starknet’s Sequencer, as much of the limit to throughput is determined by its performance.\

          The development of Starknet Alpha V0.12.0 is largely the result of a productive and enjoyable year-long collaboration between [LambdaClass](https://lambdaclass.com/) and StarkWare. We are proud to build Starknet with the LambdaClass team.


          This version, being a major one, will be up for a community vote. We invite the community to participate in shaping the future of Starknet.


          ## Performance - Throughput is Here!


          This version focuses on performance, and specifically on improved throughput, resulting in a significant 10X increase. The throughput has surged from an average of 30K Cairo steps per second (CSPS) on v0.11.0, to an impressive 220K CSPS in this latest version. This remarkable achievement results from targeted optimizations that underpin the efficiency of the Starknet Sequencer, as previously shared in our [performance roadmap](https://www.starknet.io/en/content/starknet-performance-roadmap). Three key ingredients have contributed to this improvement in Starknet's performance: Cairo-rs, Blockifier, and Papyrus, and they all benefit from the power of Rust.


          The first improvement to the Sequencer is the integration of **[Cairo-rs](https://github.com/lambdaclass/cairo-vm)**, a highly efficient Cairo runner written in Rust and developed by **LambdaClass**. By leveraging the power of Rust, Cairo-rs has enhanced the execution of Cairo contracts, resulting in a more streamlined experience for users.


          Additionally, the introduction of the **[Blockifier](https://github.com/starkware-libs/blockifier)**, a Rust-based block execution logic, has played a crucial role in improving throughput. By optimizing transaction execution time this implementation has effectively reduced wait times and alleviated network congestion, The inclusion of **[Papyrus](https://github.com/starkware-libs/papyrus)**, a local storage solution, has contributed to the efficient management of the Sequencer's local state. This enhancement has further optimized the overall system performance and responsiveness.


          ### This is Merely the First Step


          The Sequencer optimizations in this version are far from the end of the road to performance improvements.


          #### cairo_native


          Starknet will integrate LambdaClass's [cairo_native compiler](https://github.com/lambdaclass/cairo_sierra2mlir), which will enable the execution of Cairo contracts in a more efficient manner. By allowing contracts to run in "native code" such as Rust, rather than executing within the Cairo environment, we anticipate even greater efficiency and performance gains for Starknet.


          #### Parallelization


          Starknet's previous Pythonic Sequencer introduced the [parallelization of transactions](https://www.starknet.io/en/content/starknet-performance-roadmap), which significantly improved its performance. However, it's important to note that the Sequencer initial implementation in Rust, included in the V0.12.0 release, does not yet include parallelization. The ongoing development efforts are focused on parallelizing transaction execution within the block, in the spirit of [block-STM](https://malkhi.com/posts/2022/04/block-stm/). Drawing from the successful demonstrations in the Pythonic implementation, this optimization will further enhance the throughput of Starknet, enabling it to efficiently handle increased transaction volumes.


          ## No More Pending Transactions


          In previous versions, the \`PENDING\` status denoted valid blocks that were executed by the Sequencer but were not yet full, indicating additional transactions could still be added. However, in this latest release, the \`PENDING\` status has been replaced with ACCEPTED_ON_L2, reflecting the finality status of transactions. This change simplifies the transaction confirmation process and provides users with a smoother experience. 


          ## get_block_hash Syscall


          Another addition in Starknet Alpha V0.12.0 is the introduction of the \`get_block_hash\` syscall. This new system call allows developers to retrieve the hash of a specific Starknet block within the range of \`\[first_v0_12_0_block, current_block-10]\`. The signature of this [syscall](https://docs.starknet.io/documentation/architecture_and_concepts/Contracts/system-calls-cairo1/) is \`fn get_block_hash(u64 block_number) -> felt252\`.


          The error message associated with this scenario is: \`Block number out of range\`.


          To implement this change, the operating system will write, at the beginning of every block, a mapping under \`address = 0x1\` with \`current_block - 10\` as the key and its corresponding hash as the value.


          With the \`get_block_hash\` syscall, developers can conveniently retrieve block hashes, which are essential components for constructing and validating [storage proofs](https://www.starknet.io/en/content/what-are-storage-proofs-and-how-can-they-improve-oracles). These proofs enable efficient cross-chain data access and enhance the trustworthiness of blockchain data even without the need for reliance on third-party oracles. By obtaining the block hash through this syscall, developers can accurately reference a specific block's state, transactions or any other information committed in the [block header](https://docs.starknet.io/documentation/architecture_and_concepts/Blocks/header/#block_header)


          ## Cairo - Improved Contract Syntax


          In this version we’re introducing significant improvements to the smart contract syntax. The new syntax focuses on safety and lays the foundations for extensibility. Safety in this context means being more explicit on the external-facing components of the contract (interface/storage/events), which gives developers a better idea of what to expect when interacting with the contract. Extensibility, which will be finalized in a later version, allows contracts to use components from external libraries. This is a key feature of any smart contract language and will address a significant issue in the Starknet dev community. For an exhaustive treatment of the motivation and changes, see the [Cairo Roadmap blog post](https://www.starknet.io/en/content/cairo-roadmap-join-the-ride) and the [community forum post](https://community.starknet.io/t/cairo-1-contract-syntax-is-evolving/94794).


          While the [new compiler version](https://github.com/starkware-libs/cairo/releases/tag/v2.0.0-rc0) includes breaking changes, **you can keep using the older compiler version (v1.1.0) and deploy the resulting contracts on Starknet for the next six months**. This reflects our new compiler upgrade protocol for breaking changes: following new compiler versions, contracts compiled by the old compiler version will continue to be accepted for at least six months, in order to allow the community to adjust. Of course, once a Cairo contract (not Cairo 0) is declared on Starknet, it will remain available for deployment and interaction indefinitely.


          ## What’s next?


          ### Short-Term Goals: Version 0.12.1


          In the short term, Starknet is focused on enhancing user experience and transaction reliability. The next version, 0.12.1, will introduce another significant improvement: the inclusion of failed transactions in the block. Up until now, failed transactions were not included in the block, and thus the Sequencer could not charge a fee and advance the nonce for them. This created UX problems for developers. They could not rely on the nonce advancing, forcing them to continuously monitor transaction status before sending a new one. This change also protects the Sequencer from users spamming the system with failed transactions without paying for them. This update aims to provide users with a smoother and more seamless experience when interacting with Starknet.


          ### Long-Term Vision: Throughput, Latency, and Costs


          [Looking ahead](https://www.starknet.io/en/roadmap), Starknet's overarching vision is to achieve substantial scalability both in scale and cost. The next priority on the agenda is to reduce transaction costs dramatically.


          By driving down costs, Starknet aims to make transactions more affordable and inclusive, thereby enabling a broader range of use cases and empowering developers and users. The commitment to cost reduction aligns with Starknet's mission to provide a scalable, flexible, and cost-effective infrastructure for decentralized applications.


          ## Starknet Alpha V0.12.0 Vote


          [Starknet Governance Phase 1](https://medium.com/starknet-foundation/starknets-governance-first-phase-4614c7566f40) focuses on major Starknet protocol upgrades.\

          Every major Starknet version upgrade is first deployed on Testnet, giving the Starknet community a few days to examine and test the upgraded version. During this examination period, a Snapshot proposal is opened, allowing the community to vote on whether to approve the upgraded version for Mainnet deployment.


          If the proposal gains a majority of ‘YES’ votes during the voting period, it passes, and Starknet Mainnet will be upgraded accordingly.


          The Starknet Alpha V0.12.0 vote is just around the corner!\

          Everyone is invited to sign up for the notification service on the [Starknet Governance Hub](https://governance.starknet.io/) (click the bell icon).  Check out the [Delegates page](https://governance.starknet.io/delegates) & the [Becoming a Starknet delegate](https://governance.starknet.io/learn/becoming_a_starknet_delegate) to either become a delegate or select one, and discuss [Starknet alpha v0.12.0 proposal](https://community.starknet.io/t/proposal-starknet-alpha-v0-12-0/95997) on the Community forum.


          ## Summary


          Starknet Alpha V0.12.0 focuses on enhancing performance and user experience. The new version introduces a Rust-based implementation of the Sequencer, improving throughput by 10X and reducing transaction latency. Other features include a new compiler version, removal of the pending transaction status, and the addition of a block hash syscall. 


          Starknet developers are empowered to code solutions that make a difference. Start your Cairo [development journey](https://twitter.com/Starknet/status/1674689343758168065?s=20), read the [Cairo docs](https://www.cairo-lang.org/docs/), register for [Cairo Basecamp](https://docs.google.com/forms/d/e/1FAIpQLSf2k9vjPpeymbUpJMRDuN3QqNcHtjWx8whX2wY4EbihF1EaPg/viewform), or go [through the tutorials](https://www.starknet.io/en/tutorials). Want to stay up to date with all version updates? Sign up for our [Starknet Developers Newsletter](https://starknet.substack.com/).
      - type: markdown
        body: >-
          

          **_﻿\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_**


          **About LambdaClass**


          LambdaClass is an engineering-centered company with 10 years in the industry working in distributed systems, compilers, ML and cybersecurity. Throughout their history, they've supported projects that offer technical challenges and that make a difference in the world, choosing projects and partners mainly on the basis of shared goals and approaches with their creators or founders
